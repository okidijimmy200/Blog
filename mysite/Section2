Lecture 1:
Building the List and Detail view
-A Django view is just a
Python function that receives a web request and returns a web
response

**Post_list view
In this view, we are retrieving all the posts
with the published status using the published manager we created
previously.

Lecture 2:
Adding URL patterns for your views
-we add URLs for our views

Lecture 3:
Canonical URLs for models
-we add canonical URL in the models wch help us generate simple to use slugs

Lecture 4
Adding pagination
-Django has a built-in pagination class that allows you to manage paginated data
easily.

Lecture 5
Using class-based views
-you can also define your views as class methods.

Advantages of class based views over function based views
--Organizing code related to HTTP methods, such as GET, POST,
or PUT, in separate methods instead of using conditional
branching
--Using multiple inheritance to create reusable view classes
(also known as mixins)

-In order to keep pagination working, we have to use the right page
object that is passed to the template.

Lecture 6:
Creating forms with Django
***Form: Allows you to build standard forms
***ModelForm: Allows you to build forms tied to model instances

--default widget that
determines how the field is rendered in HTML. The default widget can be overridden with the widget attribute.

steps of validation
**When the view is loaded initially with a GET request, we
create a new form instance that will be used to display the
empty form in the template:
form = EmailPostForm()

**The user fills in the form and submits it via POST.

**we validate the submitted data using the form's
is_valid(If the form is not valid, we render the form in the template
again with the submitted data. We will display validation
errors in the template.) method.

**If the form is valid, we retrieve the validated data accessing
form.cleaned_data.

Lecture 7:
Sending Emails
-to send an email
**1st:need to have a local SMTP server or external SMTP server
you can tell Django to write emails to the console using 
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

Run the python manage.py shell command to open the Python shell and
send an email
--we use django.core.mail to send mail
-when e result is 1, it means it was sent successfull,if 0 then error

you need to put on the less secure app feature for google gmail to work

Lecture 8:
Creating a comment system
we will build a comment system for the blog, wherein the
users will be able to comment on posts.

Steps to create a comment system
1. Create a model to save comments
2. Create a form to submit comments and validate the input
data
3. Add a view that processes the form and saves the new
comment to the database
4. Edit the post detail template to display the list of comments
and the form to add a new comment

Creating forms from models
**build forms to enable users comment
two ways of writing forms ie Form and ModelForm

ModelForm is used to build a form dynamically from your
Comment model.

Handling ModelForms in views
**

Adding comments to the post
detail template