Lecture 1:
Building the List and Detail view
-A Django view is just a
Python function that receives a web request and returns a web
response

**Post_list view
In this view, we are retrieving all the posts
with the published status using the published manager we created
previously.

Lecture 2:
Adding URL patterns for your views
-we add URLs for our views

Lecture 3:
Canonical URLs for models
-we add canonical URL in the models wch help us generate simple to use slugs

Lecture 4
Adding pagination
-Django has a built-in pagination class that allows you to manage paginated data
easily.

Lecture 5
Using class-based views
-you can also define your views as class methods.

Advantages of class based views over function based views
--Organizing code related to HTTP methods, such as GET, POST,
or PUT, in separate methods instead of using conditional
branching
--Using multiple inheritance to create reusable view classes
(also known as mixins)

-In order to keep pagination working, we have to use the right page
object that is passed to the template.

Lecture 6:
Creating forms with Django
***Form: Allows you to build standard forms
***ModelForm: Allows you to build forms tied to model instances

--default widget that
determines how the field is rendered in HTML. The default widget can be overridden with the widget attribute.

steps of validation
**When the view is loaded initially with a GET request, we
create a new form instance that will be used to display the
empty form in the template:
form = EmailPostForm()

**The user fills in the form and submits it via POST.

**we validate the submitted data using the form's
is_valid(If the form is not valid, we render the form in the template
again with the submitted data. We will display validation
errors in the template.) method.

**If the form is valid, we retrieve the validated data accessing
form.cleaned_data.

Lecture 7:
Sending Emails
-to send an email
**1st:need to have a local SMTP server or external SMTP server
you can tell Django to write emails to the console using 
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

Run the python manage.py shell command to open the Python shell and
send an email
--we use django.core.mail to send mail
-when e result is 1, it means it was sent successfull,if 0 then error

you need to put on the less secure app feature for google gmail to work

Lecture 8:
Creating a comment system
we will build a comment system for the blog, wherein the
users will be able to comment on posts.

Steps to create a comment system
1. Create a model to save comments
2. Create a form to submit comments and validate the input
data
3. Add a view that processes the form and saves the new
comment to the database
4. Edit the post detail template to display the list of comments
and the form to add a new comment

Creating forms from models
**build forms to enable users comment
two ways of writing forms ie Form and ModelForm

ModelForm is used to build a form dynamically from your
Comment model.

Handling ModelForms in views
**
The save() method creates an instance of the model that the
form is linked to and saves it to the database. If you call it
using commit=False, you create the model instance, but you don't
save it to the database yet. This comes in handy when you
want to modify the object before finally saving it, which is
what we do next.

--The save() method is available for ModelForm but not for Form instances, since they
are not linked to any model.



Adding comments to the post detail template
--Display the total number of comments for the post
--Display the list of comments
--Display a form for users to add a new comment

Django template language doesn't use parentheses for calling methods.
**The {% with %} tag allows us to assign a value to a new variable that will be available to be used
until the {% endwith %} tag.

--The {% with %} template tag is useful to avoid hitting the database or
accessing expensive methods multiple times.

**Template filters take the value of the variable they are applied to as their
input and return a computed value

**The pluralize template filter returns a string with the letter "s" if the
value is different from 1. The preceding text will be rendered as 0
comments, 1 comment, or N comments. Django includes plenty of
template tags and filters that help you display information in the
way you want.


Add a couple of comments using the form. They should appear
under your post in chronological order

--Open the admin page and see a list of comments you created. Click on
one of them to edit it, uncheck the Active checkbox, and click on the
Save button. You will be redirected to the list of comments again,
and the Active column will display an inactive icon for the
comment. 

Lecture 9
Adding the tagging functionality
