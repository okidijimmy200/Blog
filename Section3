EXTENDING YOUR BLOG APPLICATION

-we will go through
--Creating custom template tags and filters
--Adding a sitemap and post feed
--Implementing full text search with PostgreSQL

Lecture 1:
Creating custom template tags and filters
-Django offers a variety of built-in template tags, such as {% if %} or {%
block %}.
-However, Django also allows you to create your own template tags
to perform custom actions.
-this is important when you need to add your own functionality to the templates

**Django provides the following helper functions that allow you to
create your own template tags in an easy manner:
--simple_tag: Processes the data and returns a string
--inclusion_tag: Processes the data and returns a rendered
template

--create a templatetags directory with an init file
-The way you name the file is important. You will use the name of
this module to load tags in templates.

We have created a simple template tag that returns the number of
posts published so far. in the blog_tags.py

------After adding a new template tags module, you will need to restart the
Django development server in order to use the new tags and filters in
templates.

blog/templates/base.html edit the file

The power of custom template tags is that you can process any data
and add it to any template regardless of the view executed.

inclusion tag.::
we will create a tag to display the latest posts in the
sidebar of our blog.
Edit the blog_tags.py
Inclusion tags have to return a dictionary of values,

Now, create a new template file under blog/post/ and name it
latest_posts.html.

blog/base.html edit

--We
will create a tag to display the most commented posts.

QuerySet by the computed field in descending order
ptional count variable


NB:
In addition to Count, Django offers the aggregation functions Avg, Max,
Min, and Sum. You can read more about aggregation functions at
https://docs.djangoproject.com/en/2.0/topics/db/aggregation/.

pg 167