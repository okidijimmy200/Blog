EXTENDING YOUR BLOG APPLICATION

-we will go through
--Creating custom template tags and filters
--Adding a sitemap and post feed
--Implementing full text search with PostgreSQL

Lecture 1:
Creating custom template tags and filters
-Django offers a variety of built-in template tags, such as {% if %} or {%
block %}.
-However, Django also allows you to create your own template tags
to perform custom actions.
-this is important when you need to add your own functionality to the templates

**Django provides the following helper functions that allow you to
create your own template tags in an easy manner:
--simple_tag: Processes the data and returns a string
--inclusion_tag: Processes the data and returns a rendered
template

--create a templatetags directory with an init file
-The way you name the file is important. You will use the name of
this module to load tags in templates.

We have created a simple template tag that returns the number of
posts published so far. in the blog_tags.py

------After adding a new template tags module, you will need to restart the
Django development server in order to use the new tags and filters in
templates.

blog/templates/base.html edit the file

The power of custom template tags is that you can process any data
and add it to any template regardless of the view executed.

inclusion tag.::
we will create a tag to display the latest posts in the
sidebar of our blog.
Edit the blog_tags.py
Inclusion tags have to return a dictionary of values,

Now, create a new template file under blog/post/ and name it
latest_posts.html.

blog/base.html edit

--We
will create a tag to display the most commented posts.

QuerySet by the computed field in descending order
ptional count variable


NB:
In addition to Count, Django offers the aggregation functions Avg, Max,
Min, and Sum. You can read more about aggregation functions at
https://docs.djangoproject.com/en/2.0/topics/db/aggregation/.

Lecture 2:
Creating custom template filters
-built-in template filters that allow you to modify variables in templates.
-A filter looks like {{ variable|my_filter }}.
-Filters with an argument look like {{variable|my_filter:"foo" }}.
-You can apply as many filters as you like to a variable, for example, {{ variable|filter1|filter2 }},
**Markdown is a plain text formatting syntax that is very
simple to use, and it's intended to be converted into HTML.

--install the Python markdown module
**************pip install Markdown==2.6.11**************
Then, edit the blog_tags.py

--we name our function markdown_format and name the filter markdown for
usage in templates, such as {{ variable|markdown }}.
--Django escapes the
HTML code generated by filters. We use the mark_safe function
provided by Django to mark the result as safe HTML to be rendered
in the template

--As you can see in the preceding screenshot, custom template filters
are very useful to customize formatting