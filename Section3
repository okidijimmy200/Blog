EXTENDING YOUR BLOG APPLICATION

-we will go through
--Creating custom template tags and filters
--Adding a sitemap and post feed
--Implementing full text search with PostgreSQL

Lecture 1:
Creating custom template tags and filters
-Django offers a variety of built-in template tags, such as {% if %} or {%
block %}.
-However, Django also allows you to create your own template tags
to perform custom actions.
-this is important when you need to add your own functionality to the templates

**Django provides the following helper functions that allow you to
create your own template tags in an easy manner:
--simple_tag: Processes the data and returns a string
--inclusion_tag: Processes the data and returns a rendered
template

--create a templatetags directory with an init file
-The way you name the file is important. You will use the name of
this module to load tags in templates.

We have created a simple template tag that returns the number of
posts published so far. in the blog_tags.py

------After adding a new template tags module, you will need to restart the
Django development server in order to use the new tags and filters in
templates.

blog/templates/base.html edit the file

The power of custom template tags is that you can process any data
and add it to any template regardless of the view executed.

inclusion tag.::
we will create a tag to display the latest posts in the
sidebar of our blog.
Edit the blog_tags.py
Inclusion tags have to return a dictionary of values,

Now, create a new template file under blog/post/ and name it
latest_posts.html.

blog/base.html edit

--We
will create a tag to display the most commented posts.

QuerySet by the computed field in descending order
ptional count variable


NB:
In addition to Count, Django offers the aggregation functions Avg, Max,
Min, and Sum. You can read more about aggregation functions at
https://docs.djangoproject.com/en/2.0/topics/db/aggregation/.

Lecture 2:
Creating custom template filters
-built-in template filters that allow you to modify variables in templates.
-A filter looks like {{ variable|my_filter }}.
-Filters with an argument look like {{variable|my_filter:"foo" }}.
-You can apply as many filters as you like to a variable, for example, {{ variable|filter1|filter2 }},
**Markdown is a plain text formatting syntax that is very
simple to use, and it's intended to be converted into HTML.

--install the Python markdown module
**************pip install Markdown==2.6.11**************
Then, edit the blog_tags.py

--we name our function markdown_format and name the filter markdown for
usage in templates, such as {{ variable|markdown }}.
--Django escapes the
HTML code generated by filters. We use the mark_safe function
provided by Django to mark the result as safe HTML to be rendered
in the template

--As you can see in the preceding screenshot, custom template filters
are very useful to customize formatting

Lecture 4:
Adding a sitemap to your site
-A sitemap is an XML file that tells search engines the pages of your website, their
relevance, and how frequently they are updated.

-This comes handy when you want to run multiple sites using a single Django project
-Edit the settings.py file of your project and add django.contrib.sites and django.contrib.sitemaps to the INSTALLED_APPS
setting.
-python manage.py migrate
-inside blog app, create sitemaps.py.

-If you want to
specify the URL for each object, you can add a location method to
your sitemap class.
-Edit the main urls.py file
-run the development server and open http://127.0.0.1:8000/sitemap.xml in your browser

-The URL for each post has been built calling its get_absolute_url()
method.
-The lastmod attribute corresponds to the post updated date field, as we

Lecture 4:
Creating feeds for your blog posts
-Django has a built-in syndication feed framework similar manner to
creating sitemaps using the site's framework.
-A web feed is a data format (usually XML) that provides users with frequently updated
content. Users will be able to subscribe to your feed using a feed
aggregator, a software that is used to read feeds and get new
content notifications.
-feeds.py in blog

-The
title, link, and description attributes correspond to the <title>, <link>,
and <description> RSS elements, respectively.
-blog/urls.py file,
-http://127.0.0.1:8000/blog/feed/ to run the feed
-The final step is to add a feed subscription link to the blog's sidebar.
Open the blog/base.html

Lecture 5:
Adding full-text search to your blog
-if you want to perform complex search lookups, retrieving
results by similarity or by weighting terms, you will need to use a
full-text search engine.

-add django.contrib.postgres to  the INSTALLED_APPS setting
-Now, you can search against a single field using the search QuerySet
lookup,

-You might want to search against multiple fields,we use searchVector

ie
from django.contrib.postgres.search import SearchVector
from blog.models import Post
Post.objects.annotate(
search=SearchVector('title', 'body'),
).filter(search='django')
-Using annotate and defining SearchVector with both fields, we provide
a functionality to match the query against both the title and body of
the posts.

# single search query
POST.objects.filter(body__search='coronaVirus')

)

-We need to create a template to
display the form and the results when the user performs a search.

-/blog/post/search.html

